// Code generated by ent, DO NOT EDIT.

package local

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/openPanel/core/app/generated/db/local/kv"
)

// KV is the model entity for the KV schema.
type KV struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// ExpiresAt holds the value of the "expires_at" field.
	ExpiresAt time.Time `json:"expires_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*KV) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case kv.FieldID:
			values[i] = new(sql.NullInt64)
		case kv.FieldKey, kv.FieldValue:
			values[i] = new(sql.NullString)
		case kv.FieldCreatedAt, kv.FieldUpdatedAt, kv.FieldExpiresAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type KV", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the KV fields.
func (k *KV) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case kv.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			k.ID = int(value.Int64)
		case kv.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				k.CreatedAt = value.Time
			}
		case kv.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				k.UpdatedAt = value.Time
			}
		case kv.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				k.Key = value.String
			}
		case kv.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				k.Value = value.String
			}
		case kv.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				k.ExpiresAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this KV.
// Note that you need to call KV.Unwrap() before calling this method if this KV
// was returned from a transaction, and the transaction was committed or rolled back.
func (k *KV) Update() *KVUpdateOne {
	return NewKVClient(k.config).UpdateOne(k)
}

// Unwrap unwraps the KV entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (k *KV) Unwrap() *KV {
	_tx, ok := k.config.driver.(*txDriver)
	if !ok {
		panic("local: KV is not a transactional entity")
	}
	k.config.driver = _tx.drv
	return k
}

// String implements the fmt.Stringer.
func (k *KV) String() string {
	var builder strings.Builder
	builder.WriteString("KV(")
	builder.WriteString(fmt.Sprintf("id=%v, ", k.ID))
	builder.WriteString("created_at=")
	builder.WriteString(k.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(k.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(k.Key)
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(k.Value)
	builder.WriteString(", ")
	builder.WriteString("expires_at=")
	builder.WriteString(k.ExpiresAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// KVs is a parsable slice of KV.
type KVs []*KV

// Code generated by ent, DO NOT EDIT.

package local

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openPanel/core/app/generated/db/local/kv"
	"github.com/openPanel/core/app/generated/db/local/predicate"
)

// KVUpdate is the builder for updating KV entities.
type KVUpdate struct {
	config
	hooks     []Hook
	mutation  *KVMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the KVUpdate builder.
func (ku *KVUpdate) Where(ps ...predicate.KV) *KVUpdate {
	ku.mutation.Where(ps...)
	return ku
}

// SetUpdatedAt sets the "updated_at" field.
func (ku *KVUpdate) SetUpdatedAt(t time.Time) *KVUpdate {
	ku.mutation.SetUpdatedAt(t)
	return ku
}

// SetKey sets the "key" field.
func (ku *KVUpdate) SetKey(s string) *KVUpdate {
	ku.mutation.SetKey(s)
	return ku
}

// SetValue sets the "value" field.
func (ku *KVUpdate) SetValue(s string) *KVUpdate {
	ku.mutation.SetValue(s)
	return ku
}

// SetExpiresAt sets the "expires_at" field.
func (ku *KVUpdate) SetExpiresAt(t time.Time) *KVUpdate {
	ku.mutation.SetExpiresAt(t)
	return ku
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (ku *KVUpdate) SetNillableExpiresAt(t *time.Time) *KVUpdate {
	if t != nil {
		ku.SetExpiresAt(*t)
	}
	return ku
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (ku *KVUpdate) ClearExpiresAt() *KVUpdate {
	ku.mutation.ClearExpiresAt()
	return ku
}

// Mutation returns the KVMutation object of the builder.
func (ku *KVUpdate) Mutation() *KVMutation {
	return ku.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ku *KVUpdate) Save(ctx context.Context) (int, error) {
	ku.defaults()
	return withHooks[int, KVMutation](ctx, ku.sqlSave, ku.mutation, ku.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ku *KVUpdate) SaveX(ctx context.Context) int {
	affected, err := ku.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ku *KVUpdate) Exec(ctx context.Context) error {
	_, err := ku.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ku *KVUpdate) ExecX(ctx context.Context) {
	if err := ku.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ku *KVUpdate) defaults() {
	if _, ok := ku.mutation.UpdatedAt(); !ok {
		v := kv.UpdateDefaultUpdatedAt()
		ku.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ku *KVUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *KVUpdate {
	ku.modifiers = append(ku.modifiers, modifiers...)
	return ku
}

func (ku *KVUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(kv.Table, kv.Columns, sqlgraph.NewFieldSpec(kv.FieldID, field.TypeInt))
	if ps := ku.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ku.mutation.UpdatedAt(); ok {
		_spec.SetField(kv.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ku.mutation.Key(); ok {
		_spec.SetField(kv.FieldKey, field.TypeString, value)
	}
	if value, ok := ku.mutation.Value(); ok {
		_spec.SetField(kv.FieldValue, field.TypeString, value)
	}
	if value, ok := ku.mutation.ExpiresAt(); ok {
		_spec.SetField(kv.FieldExpiresAt, field.TypeTime, value)
	}
	if ku.mutation.ExpiresAtCleared() {
		_spec.ClearField(kv.FieldExpiresAt, field.TypeTime)
	}
	_spec.AddModifiers(ku.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ku.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kv.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ku.mutation.done = true
	return n, nil
}

// KVUpdateOne is the builder for updating a single KV entity.
type KVUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *KVMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (kuo *KVUpdateOne) SetUpdatedAt(t time.Time) *KVUpdateOne {
	kuo.mutation.SetUpdatedAt(t)
	return kuo
}

// SetKey sets the "key" field.
func (kuo *KVUpdateOne) SetKey(s string) *KVUpdateOne {
	kuo.mutation.SetKey(s)
	return kuo
}

// SetValue sets the "value" field.
func (kuo *KVUpdateOne) SetValue(s string) *KVUpdateOne {
	kuo.mutation.SetValue(s)
	return kuo
}

// SetExpiresAt sets the "expires_at" field.
func (kuo *KVUpdateOne) SetExpiresAt(t time.Time) *KVUpdateOne {
	kuo.mutation.SetExpiresAt(t)
	return kuo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (kuo *KVUpdateOne) SetNillableExpiresAt(t *time.Time) *KVUpdateOne {
	if t != nil {
		kuo.SetExpiresAt(*t)
	}
	return kuo
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (kuo *KVUpdateOne) ClearExpiresAt() *KVUpdateOne {
	kuo.mutation.ClearExpiresAt()
	return kuo
}

// Mutation returns the KVMutation object of the builder.
func (kuo *KVUpdateOne) Mutation() *KVMutation {
	return kuo.mutation
}

// Where appends a list predicates to the KVUpdate builder.
func (kuo *KVUpdateOne) Where(ps ...predicate.KV) *KVUpdateOne {
	kuo.mutation.Where(ps...)
	return kuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (kuo *KVUpdateOne) Select(field string, fields ...string) *KVUpdateOne {
	kuo.fields = append([]string{field}, fields...)
	return kuo
}

// Save executes the query and returns the updated KV entity.
func (kuo *KVUpdateOne) Save(ctx context.Context) (*KV, error) {
	kuo.defaults()
	return withHooks[*KV, KVMutation](ctx, kuo.sqlSave, kuo.mutation, kuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (kuo *KVUpdateOne) SaveX(ctx context.Context) *KV {
	node, err := kuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (kuo *KVUpdateOne) Exec(ctx context.Context) error {
	_, err := kuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kuo *KVUpdateOne) ExecX(ctx context.Context) {
	if err := kuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kuo *KVUpdateOne) defaults() {
	if _, ok := kuo.mutation.UpdatedAt(); !ok {
		v := kv.UpdateDefaultUpdatedAt()
		kuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (kuo *KVUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *KVUpdateOne {
	kuo.modifiers = append(kuo.modifiers, modifiers...)
	return kuo
}

func (kuo *KVUpdateOne) sqlSave(ctx context.Context) (_node *KV, err error) {
	_spec := sqlgraph.NewUpdateSpec(kv.Table, kv.Columns, sqlgraph.NewFieldSpec(kv.FieldID, field.TypeInt))
	id, ok := kuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`local: missing "KV.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := kuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, kv.FieldID)
		for _, f := range fields {
			if !kv.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("local: invalid field %q for query", f)}
			}
			if f != kv.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := kuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kuo.mutation.UpdatedAt(); ok {
		_spec.SetField(kv.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := kuo.mutation.Key(); ok {
		_spec.SetField(kv.FieldKey, field.TypeString, value)
	}
	if value, ok := kuo.mutation.Value(); ok {
		_spec.SetField(kv.FieldValue, field.TypeString, value)
	}
	if value, ok := kuo.mutation.ExpiresAt(); ok {
		_spec.SetField(kv.FieldExpiresAt, field.TypeTime, value)
	}
	if kuo.mutation.ExpiresAtCleared() {
		_spec.ClearField(kv.FieldExpiresAt, field.TypeTime)
	}
	_spec.AddModifiers(kuo.modifiers...)
	_node = &KV{config: kuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, kuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kv.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	kuo.mutation.done = true
	return _node, nil
}

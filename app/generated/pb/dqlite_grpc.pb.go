// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: dqlite.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DqliteConnection_ServeDqlite_FullMethodName = "/dqlite.DqliteConnection/ServeDqlite"
)

// DqliteConnectionClient is the client API for DqliteConnection service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DqliteConnectionClient interface {
	ServeDqlite(ctx context.Context, opts ...grpc.CallOption) (DqliteConnection_ServeDqliteClient, error)
}

type dqliteConnectionClient struct {
	cc grpc.ClientConnInterface
}

func NewDqliteConnectionClient(cc grpc.ClientConnInterface) DqliteConnectionClient {
	return &dqliteConnectionClient{cc}
}

func (c *dqliteConnectionClient) ServeDqlite(ctx context.Context, opts ...grpc.CallOption) (DqliteConnection_ServeDqliteClient, error) {
	stream, err := c.cc.NewStream(ctx, &DqliteConnection_ServiceDesc.Streams[0], DqliteConnection_ServeDqlite_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &dqliteConnectionServeDqliteClient{stream}
	return x, nil
}

type DqliteConnection_ServeDqliteClient interface {
	Send(*DqliteData) error
	Recv() (*DqliteData, error)
	grpc.ClientStream
}

type dqliteConnectionServeDqliteClient struct {
	grpc.ClientStream
}

func (x *dqliteConnectionServeDqliteClient) Send(m *DqliteData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dqliteConnectionServeDqliteClient) Recv() (*DqliteData, error) {
	m := new(DqliteData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DqliteConnectionServer is the server API for DqliteConnection service.
// All implementations should embed UnimplementedDqliteConnectionServer
// for forward compatibility
type DqliteConnectionServer interface {
	ServeDqlite(DqliteConnection_ServeDqliteServer) error
}

// UnimplementedDqliteConnectionServer should be embedded to have forward compatible implementations.
type UnimplementedDqliteConnectionServer struct {
}

func (UnimplementedDqliteConnectionServer) ServeDqlite(DqliteConnection_ServeDqliteServer) error {
	return status.Errorf(codes.Unimplemented, "method ServeDqlite not implemented")
}

// UnsafeDqliteConnectionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DqliteConnectionServer will
// result in compilation errors.
type UnsafeDqliteConnectionServer interface {
	mustEmbedUnimplementedDqliteConnectionServer()
}

func RegisterDqliteConnectionServer(s grpc.ServiceRegistrar, srv DqliteConnectionServer) {
	s.RegisterService(&DqliteConnection_ServiceDesc, srv)
}

func _DqliteConnection_ServeDqlite_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DqliteConnectionServer).ServeDqlite(&dqliteConnectionServeDqliteServer{stream})
}

type DqliteConnection_ServeDqliteServer interface {
	Send(*DqliteData) error
	Recv() (*DqliteData, error)
	grpc.ServerStream
}

type dqliteConnectionServeDqliteServer struct {
	grpc.ServerStream
}

func (x *dqliteConnectionServeDqliteServer) Send(m *DqliteData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dqliteConnectionServeDqliteServer) Recv() (*DqliteData, error) {
	m := new(DqliteData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DqliteConnection_ServiceDesc is the grpc.ServiceDesc for DqliteConnection service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DqliteConnection_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dqlite.DqliteConnection",
	HandlerType: (*DqliteConnectionServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServeDqlite",
			Handler:       _DqliteConnection_ServeDqlite_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "dqlite.proto",
}

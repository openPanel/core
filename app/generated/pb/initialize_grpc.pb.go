// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: initialize.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	InitializeService_EstimateLatency_FullMethodName = "/openPanel.InitializeService/EstimateLatency"
	InitializeService_UpdateLinkState_FullMethodName = "/openPanel.InitializeService/UpdateLinkState"
	InitializeService_Register_FullMethodName        = "/openPanel.InitializeService/Register"
	InitializeService_GetClusterInfo_FullMethodName  = "/openPanel.InitializeService/GetClusterInfo"
)

// InitializeServiceClient is the client API for InitializeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InitializeServiceClient interface {
	// request target node to estimate the latency between the target node and the payload node
	EstimateLatency(ctx context.Context, in *EstimateLatencyRequest, opts ...grpc.CallOption) (*EstimateLatencyResponse, error)
	// request target node to update its link states, and return the updated link states
	UpdateLinkState(ctx context.Context, in *UpdateLinkStateRequest, opts ...grpc.CallOption) (*UpdateLinkStateResponse, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	GetClusterInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetClusterInfoResponse, error)
}

type initializeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInitializeServiceClient(cc grpc.ClientConnInterface) InitializeServiceClient {
	return &initializeServiceClient{cc}
}

func (c *initializeServiceClient) EstimateLatency(ctx context.Context, in *EstimateLatencyRequest, opts ...grpc.CallOption) (*EstimateLatencyResponse, error) {
	out := new(EstimateLatencyResponse)
	err := c.cc.Invoke(ctx, InitializeService_EstimateLatency_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *initializeServiceClient) UpdateLinkState(ctx context.Context, in *UpdateLinkStateRequest, opts ...grpc.CallOption) (*UpdateLinkStateResponse, error) {
	out := new(UpdateLinkStateResponse)
	err := c.cc.Invoke(ctx, InitializeService_UpdateLinkState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *initializeServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, InitializeService_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *initializeServiceClient) GetClusterInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetClusterInfoResponse, error) {
	out := new(GetClusterInfoResponse)
	err := c.cc.Invoke(ctx, InitializeService_GetClusterInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InitializeServiceServer is the server API for InitializeService service.
// All implementations should embed UnimplementedInitializeServiceServer
// for forward compatibility
type InitializeServiceServer interface {
	// request target node to estimate the latency between the target node and the payload node
	EstimateLatency(context.Context, *EstimateLatencyRequest) (*EstimateLatencyResponse, error)
	// request target node to update its link states, and return the updated link states
	UpdateLinkState(context.Context, *UpdateLinkStateRequest) (*UpdateLinkStateResponse, error)
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	GetClusterInfo(context.Context, *emptypb.Empty) (*GetClusterInfoResponse, error)
}

// UnimplementedInitializeServiceServer should be embedded to have forward compatible implementations.
type UnimplementedInitializeServiceServer struct {
}

func (UnimplementedInitializeServiceServer) EstimateLatency(context.Context, *EstimateLatencyRequest) (*EstimateLatencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateLatency not implemented")
}
func (UnimplementedInitializeServiceServer) UpdateLinkState(context.Context, *UpdateLinkStateRequest) (*UpdateLinkStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLinkState not implemented")
}
func (UnimplementedInitializeServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedInitializeServiceServer) GetClusterInfo(context.Context, *emptypb.Empty) (*GetClusterInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterInfo not implemented")
}

// UnsafeInitializeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InitializeServiceServer will
// result in compilation errors.
type UnsafeInitializeServiceServer interface {
	mustEmbedUnimplementedInitializeServiceServer()
}

func RegisterInitializeServiceServer(s grpc.ServiceRegistrar, srv InitializeServiceServer) {
	s.RegisterService(&InitializeService_ServiceDesc, srv)
}

func _InitializeService_EstimateLatency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateLatencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InitializeServiceServer).EstimateLatency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InitializeService_EstimateLatency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InitializeServiceServer).EstimateLatency(ctx, req.(*EstimateLatencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InitializeService_UpdateLinkState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLinkStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InitializeServiceServer).UpdateLinkState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InitializeService_UpdateLinkState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InitializeServiceServer).UpdateLinkState(ctx, req.(*UpdateLinkStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InitializeService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InitializeServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InitializeService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InitializeServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InitializeService_GetClusterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InitializeServiceServer).GetClusterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InitializeService_GetClusterInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InitializeServiceServer).GetClusterInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// InitializeService_ServiceDesc is the grpc.ServiceDesc for InitializeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InitializeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "openPanel.InitializeService",
	HandlerType: (*InitializeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EstimateLatency",
			Handler:    _InitializeService_EstimateLatency_Handler,
		},
		{
			MethodName: "UpdateLinkState",
			Handler:    _InitializeService_UpdateLinkState_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _InitializeService_Register_Handler,
		},
		{
			MethodName: "GetClusterInfo",
			Handler:    _InitializeService_GetClusterInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "initialize.proto",
}

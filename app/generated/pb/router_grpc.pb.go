// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: router.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LinkStateService_UpdateLinkState_FullMethodName  = "/openPanel.LinkStateService/UpdateLinkState"
	LinkStateService_NotifyNodeUpdate_FullMethodName = "/openPanel.LinkStateService/NotifyNodeUpdate"
)

// LinkStateServiceClient is the client API for LinkStateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LinkStateServiceClient interface {
	// Update the link state of the node. Part of a broadcast.
	UpdateLinkState(ctx context.Context, in *LinkStateUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Indicate that the info of this node should be reload.
	NotifyNodeUpdate(ctx context.Context, in *NodeUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type linkStateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLinkStateServiceClient(cc grpc.ClientConnInterface) LinkStateServiceClient {
	return &linkStateServiceClient{cc}
}

func (c *linkStateServiceClient) UpdateLinkState(ctx context.Context, in *LinkStateUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, LinkStateService_UpdateLinkState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkStateServiceClient) NotifyNodeUpdate(ctx context.Context, in *NodeUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, LinkStateService_NotifyNodeUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LinkStateServiceServer is the server API for LinkStateService service.
// All implementations should embed UnimplementedLinkStateServiceServer
// for forward compatibility
type LinkStateServiceServer interface {
	// Update the link state of the node. Part of a broadcast.
	UpdateLinkState(context.Context, *LinkStateUpdate) (*emptypb.Empty, error)
	// Indicate that the info of this node should be reload.
	NotifyNodeUpdate(context.Context, *NodeUpdateRequest) (*emptypb.Empty, error)
}

// UnimplementedLinkStateServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLinkStateServiceServer struct {
}

func (UnimplementedLinkStateServiceServer) UpdateLinkState(context.Context, *LinkStateUpdate) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLinkState not implemented")
}
func (UnimplementedLinkStateServiceServer) NotifyNodeUpdate(context.Context, *NodeUpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyNodeUpdate not implemented")
}

// UnsafeLinkStateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LinkStateServiceServer will
// result in compilation errors.
type UnsafeLinkStateServiceServer interface {
	mustEmbedUnimplementedLinkStateServiceServer()
}

func RegisterLinkStateServiceServer(s grpc.ServiceRegistrar, srv LinkStateServiceServer) {
	s.RegisterService(&LinkStateService_ServiceDesc, srv)
}

func _LinkStateService_UpdateLinkState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkStateUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkStateServiceServer).UpdateLinkState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinkStateService_UpdateLinkState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkStateServiceServer).UpdateLinkState(ctx, req.(*LinkStateUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkStateService_NotifyNodeUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkStateServiceServer).NotifyNodeUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinkStateService_NotifyNodeUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkStateServiceServer).NotifyNodeUpdate(ctx, req.(*NodeUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LinkStateService_ServiceDesc is the grpc.ServiceDesc for LinkStateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LinkStateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "openPanel.LinkStateService",
	HandlerType: (*LinkStateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateLinkState",
			Handler:    _LinkStateService_UpdateLinkState_Handler,
		},
		{
			MethodName: "NotifyNodeUpdate",
			Handler:    _LinkStateService_NotifyNodeUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "router.proto",
}
